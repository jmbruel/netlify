@Article{ NaMeGaBrMaEb2019.1,
author = {Naumchev, Alexandr and Meyer, Bertrand and Mazzara, Manuel and Galinier, Florian and Bruel, Jean-Michel and Ebersold, Sophie},
title = "{AutoReq: expressing and verifying requirements for control systems}",
journal = {Journal of Visual Languages and Computing},
publisher = {Elsevier},
address = {http://www.elsevier.com/},
year = {2019},
month = {apr},
volume = {51},
pages = {131--142},
language = {anglais},
URL = {https://doi.org/10.1016/j.cola.2019.02.004 - https://oatao.univ-toulouse.fr/26171/},
keywords = {AutoReq, seamless requirements, Design by Contract, AutoProof, Eiffel, Landing Gear System, specification drivers, multirequirements},
abstract = {The considerable effort of writing requirements is only worthwhile if the result meets two conditions: the requirements reflect stakeholders' needs, and the implementation satisfies them. In usual approaches, the use of different notations for requirements (often natural language) and implementations (a programming language) makes both conditions elusive. AutoReq, presented in this article, takes a different approach to both the writing of requirements and their verification. Applying the approach to a well-documented example, a landing gear system, allowed for a mechanical proof of consistency and uncovered an error in a published discussion of the problem.}
}
@Article{ ObPaBrLu2018.1,
author = {Ober, Ileana and Palyart, Marc and Bruel, Jean-Michel and Lugato, David},
title = "{On the Use of Models for High-Performance Scientific Computing Applications: an Experience Report}",
journal = {International Journal on Software and Systems Modeling},
publisher = {Springer-Verlag},
address = {https://www.springer.com/de},
year = {2018},
month = {feb},
volume = {17},
number = {1},
pages = {319--342},
language = {anglais},
URL = {https://doi.org/10.1007/s10270-016-0518-0 - https://oatao.univ-toulouse.fr/22025/},
keywords = {HPC, High-performance calculus, MDE Model-driven engineering, Architecture, Fortran},
abstract = {This paper reports on a four-year project that aims to raise the abstraction level through the use of model-driven engineering (MDE) techniques in the development of scientific applications relying on high-performance computing. The development and maintenance of high-performance scientific computing software is reputedly a complex task. This complexity results from the frequent evolutions of supercomputers and the tight coupling between software and hardware aspects. Moreover, current parallel programming approaches result in a mixing of concerns within the source code. Our approach relies on the use of MDE and consists in defining domain-specific modeling languages targeting various domain experts involved in the development of HPC applications, allowing each of them to handle their dedicated model in a both user-friendly and hardware-independent way. The different concerns are separated thanks to the use of several models as well as several modeling viewpoints on these models. Depending on the targeted execution platforms, these abstract models are translated into executable implementations by means of model transformations. To make all of these effective, we have developed a tool chain that is also presented in this paper. The approach is assessed through a multi-dimensional validation that focuses on its applicability, its expressiveness and its efficiency. To capitalize on the gained experience, we analyze some lessons learned during this project.}
}
@InProceedings{ BaObBr2020.1,
author = {Baduel, Ronan and Ober, Iulian and Bruel, Jean-Michel},
title = "{Modeling and verification method for an early evaluation of Systems of Systems interactions}",
booktitle = "{ACM Symposium on Applied Computing (SAC 2020), Brno, Czech Republic, 30/03/2020-03/04/2020}",
year = {2020},
month = {mar},
publisher = {ACM : Association for Computing Machinery},
address = {https://www.acm.org/},
pages = {(on line)},
language = {anglais},
URL = {https://www.irit.fr/~Iulian.Ober/docs/SAC2020.pdf,%20https://doi.org/10.1145/3341105.3373944 - https://oatao.univ-toulouse.fr/26362/},
abstract = {This paper presents the results achieved while pursuing the verification and validation of a train system behavior at the first steps of development in an industrial context. At this stage, and at least from the industrial point of view, the train can be considered as a System of Systems (SoS). A method is proposed, supported by preliminary results through the definition and verification of constrained states and preconditions to use cases, as well as a structure for the behavior.}
}
@InProceedings{ Ko2019.2,
author = {Koussaifi, Maroun and Trouilhet, Sylvie and Arcangeli, Jean-Paul and Bruel, Jean-Michel},
title = "{Automated user-oriented description of emerging composite ambient applications}",
booktitle = "{International Conference on Software Engineering and Knowledge Engineering (SEKE 2019), Lisbonne, 10/07/2019-12/07/2019}",
year = {2019},
month = {jul},
publisher = {KSI : Knowledge Systems Institute},
address = {https://www.ksibootcamps.org/},
pages = {473--478},
language = {anglais},
URL = {http://doi.org/10.18293/SEKE2019-131},
keywords = {Ambient intelligence, Emergence, Service description, User-oriented description language, Service composition},
abstract = {Ambient environments consist of components surrounding the user and offering services. Applications can here be composed opportunistically and automatically by an intelligent system that puts together available components. Thus, applications that are a priori unknown emerge from the environment. The problem is in the intelligible presentation to an average user of those emerging composite applications. Our approach consists in automatic generation of user-oriented application descriptions from unit descriptions of each component and service. For that, we propose a well-defined language for component description and a method for combining descriptions. A prototype has been developed and used to experiment the generation of different composite application descriptions. Based on these experiments, we assess the degree of fulfillment of the requirements we have identified for the problem.}
}
@article{DBLP:journals/cacm/KienzleMCBBBBBC20,
  author    = {J{\"{o}}rg Kienzle and
               Gunter Mussbacher and
               Beno{\^{\i}}t Combemale and
               Lucy Bastin and
               Nelly Bencomo and
               Jean{-}Michel Bruel and
               Christoph Becker and
               Stefanie Betz and
               Ruzanna Chitchyan and
               Betty H. C. Cheng and
               Sonja Klingert and
               Richard F. Paige and
               Birgit Penzenstadler and
               Norbert Seyff and
               Eugene Syriani and
               Colin C. Venters},
  title     = {Toward model-driven sustainability evaluation},
  journal   = {Commun. {ACM}},
  volume    = {63},
  number    = {3},
  pages     = {80--91},
  year      = {2020},
  url       = {https://doi.org/10.1145/3371906},
  doi       = {10.1145/3371906},
  timestamp = {Tue, 10 Mar 2020 09:08:18 +0100},
  biburl    = {https://dblp.org/rec/journals/cacm/KienzleMCBBBBBC20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{DBLP:journals/sosym/BruelCGJKLMSV20,
  author    = {Jean{-}Michel Bruel and
               Beno{\^{\i}}t Combemale and
               Esther Guerra and
               Jean{-}Marc J{\'{e}}z{\'{e}}quel and
               J{\"{o}}rg Kienzle and
               Juan de Lara and
               Gunter Mussbacher and
               Eugene Syriani and
               Hans Vangheluwe},
  title     = {Comparing and classifying model transformation reuse approaches across
               metamodels},
  journal   = {Softw. Syst. Model.},
  volume    = {19},
  number    = {2},
  pages     = {441--465},
  year      = {2020},
  url       = {https://doi.org/10.1007/s10270-019-00762-9},
  doi       = {10.1007/s10270-019-00762-9},
  timestamp = {Fri, 18 Sep 2020 11:19:43 +0200},
  biburl    = {https://dblp.org/rec/journals/sosym/BruelCGJKLMSV20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/sac/BaduelOB20,
  author    = {Ronan Baduel and
               Iulian Ober and
               Jean{-}Michel Bruel},
  editor    = {Chih{-}Cheng Hung and
               Tom{\'{a}}s Cern{\'{y}} and
               Dongwan Shin and
               Alessio Bechini},
  title     = {Modeling and verification method for an early evaluation of systems
               of systems interactions},
  booktitle = {{SAC} '20: The 35th {ACM/SIGAPP} Symposium on Applied Computing, online
               event, [Brno, Czech Republic], March 30 - April 3, 2020},
  pages     = {1798--1805},
  publisher = {{ACM}},
  year      = {2020},
  url       = {https://doi.org/10.1145/3341105.3373944},
  doi       = {10.1145/3341105.3373944},
  timestamp = {Thu, 02 Apr 2020 17:08:04 +0200},
  biburl    = {https://dblp.org/rec/conf/sac/BaduelOB20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/fisee/KhazeevACMBB19,
  author    = {Mansur Khazeev and
               Hamna Aslam and
               Daniel de Carvalho and
               Manuel Mazzara and
               Jean{-}Michel Bruel and
               Joseph Alexander Brown},
  editor    = {Jean{-}Michel Bruel and
               Alfredo Capozucca and
               Manuel Mazzara and
               Bertrand Meyer and
               Alexandr Naumchev and
               Andrey Sadovykh},
  title     = {Reflections on Teaching Formal Methods for Software Development in
               Higher Education},
  booktitle = {Frontiers in Software Engineering Education - First International
               Workshop, {FISEE} 2019, Villebrumier, France, November 11-13, 2019,
               Invited Papers},
  series    = {Lecture Notes in Computer Science},
  volume    = {12271},
  pages     = {28--41},
  publisher = {Springer},
  year      = {2019},
  url       = {https://doi.org/10.1007/978-3-030-57663-9\_3},
  doi       = {10.1007/978-3-030-57663-9\_3},
  timestamp = {Thu, 20 Aug 2020 17:22:47 +0200},
  biburl    = {https://dblp.org/rec/conf/fisee/KhazeevACMBB19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/tools/0001BEGN19,
  author    = {Bertrand Meyer and
               Jean{-}Michel Bruel and
               Sophie Ebersold and
               Florian Galinier and
               Alexandr Naumchev},
  editor    = {Manuel Mazzara and
               Jean{-}Michel Bruel and
               Bertrand Meyer and
               Alexander K. Petrenko},
  title     = {Towards an Anatomy of Software Requirements},
  booktitle = {Software Technology: Methods and Tools - 51st International Conference,
               {TOOLS} 2019, Tatarstan, Russia, October 15-17, 2019, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {11771},
  pages     = {10--40},
  publisher = {Springer},
  year      = {2019},
  url       = {https://doi.org/10.1007/978-3-030-29852-4\_2},
  doi       = {10.1007/978-3-030-29852-4\_2},
  timestamp = {Wed, 24 Jun 2020 11:26:48 +0200},
  biburl    = {https://dblp.org/rec/conf/tools/0001BEGN19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
//-------- IEEE Software 2020

@ARTICLE{9094197,  
  author={B. {Combemale} and J. A. {Kienzle} and G. {Mussbacher} and H. {Ali} and D. {Amyot} and M. {Bagherzadeh} and E. {Batot} and N. {Bencomo} and B. {Benni} and J. {Bruel} and J. {Cabot} and B. H. C. {Cheng} and P. {Collet} and G. {Engels} and R. {Heinrich} and J. {Jezequel} and A. {Koziolek} and S. {Mosser} and R. {Reussner} and H. {Sahraoui} and R. {Saini} and J. {Sallou} and S. {Stinckwich} and E. {Syriani} and M. {Wimmer}},  
  journal={IEEE Software},   
  title={A Hitchhiker’s Guide to Model-Driven Engineering for Data-Centric Systems},   
  year={2020},  
  volume={},  
  number={},  
  pages={0-0},  
  abstract={},  
  keywords={Data models;Unified modeling language;Mathematical model;Predictive models;Numerical models;Sociotechnical systems;Software},  
  doi={10.1109/MS.2020.2995125},  
  ISSN={1937-4194},  
  month={},
}

//-------- DevOps Proceedings 2020

@book{bruel:hal-02976604,
  TITLE = {{Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment}},
  AUTHOR = {Bruel, Jean-Michel and Mazzara, Manuel and Meyer, Bertrand},
  URL = {https://hal.archives-ouvertes.fr/hal-02976604},
  EDITOR = {Bruel and Jean-Michel and Mazzara and Manuel and Meyer and Bertrand},
  PUBLISHER = {{Springer}},
  SERIES = {Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment},
  NUMBER = {11350},
  PAGES = {1-226},
  YEAR = {2019},
  HAL_ID = {hal-02976604},
  HAL_VERSION = {v1},
}

//-------- Models demo 2020 -- Best demo award

@inproceedings{papygame2020,
author = {Bucchiarone, Antonio and Savary-Leblanc, Maxime and Pallec, Xavier Le and Bruel, Jean-Michel and Cicchetti, Antonio and Cabot, Jordi and Gerard, Sebastien and Aslam, Hamna and Marconi, Annapaola and Perillo, Mirko},
title = {Papyrus for Gamers, Let's Play Modeling},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3417990.3422002},
doi = {10.1145/3417990.3422002},
abstract = {Gamification refers to the exploitation of gaming mechanisms for serious purposes,
like learning hard-to-train skills such as modeling.We present a gamified version
of Papyrus, the well-known open source modeling tool. Instructors can use it to easily
create new modeling games (including the tasks, solutions, levels, rewards...) to
help students learning any specific modeling aspect.The evaluation of the game components
is delegated to the GDF gamification framework that bidirectionally communicates with
the Papyrus core via API calls. Our gamified Papyrus includes as well a game dashboard
component implemented with HTML/CSS/Javascript and displayed thanks to the integration
of a web browser embedded in an Eclipse view.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {5},
numpages = {5},
keywords = {gamification, software modeling, papyrus, modeling education},
location = {Virtual Event, Canada},
series = {MODELS '20}
}
//-------- ACM Computing Survey 2021 -- IF 7.9 !!

@article{acmSurveys2021,
author = {Bruel, Jean-Michel and Ebersold, Sophie and Galinier, Florian and Mazzara, Manuel and Naumchev, Alexandr and Meyer, Bertrand},
title = {The Role of Formalism in System Requirements},
year = {2021},
issue_date = {June 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3448975},
doi = {10.1145/3448975},
abstract = {A major determinant of the quality of software systems is the quality of their requirements, which should be both understandable and precise. Most requirements are written in natural language, which is good for understandability but lacks precision.To make requirements precise, researchers have for years advocated the use of mathematics-based notations and methods, known as “formal.” Many exist, differing in their style, scope, and applicability. The present survey discusses some of the main formal approaches and compares them to informal methods.The analysis uses a set of nine complementary criteria, such as level of abstraction, tool availability, and traceability support. It classifies the approaches into five categories based on their principal style for specifying requirements: natural-language, semi-formal, automata/graphs, mathematical, and seamless (programming-language-based). It includes examples from all of these categories, altogether 21 different approaches, including for example SysML, Relax, Eiffel, Event-B, and Alloy.The review discusses a number of open questions, including seamlessness, the role of tools and education, and how to make industrial applications benefit more from the contributions of formal approaches.},
journal = {ACM Comput. Surv.},
month = may,
articleno = {93},
numpages = {36},
keywords = {Formal, specification, software, requirement, seamless}
}

//-------- JUCS Journal of Universal Computer Science 2021 -- IF 1.155 (2019)

@article{jucs-2021,
	author = {Sylvie Trouilhet and Jean-Paul Arcangeli and Jean-Michel Bruel and Maroun Koussaifi},
	title = {Model-Driven Engineering for End-Users in the Loop in Smart Ambient Systems},
	volume = {27},
	number = {7},
	year = {2021},
	doi = {10.3897/jucs.70515},
	publisher = {Journal of Universal Computer Science},
	abstract = {At the heart of cyber-physical and ambient systems, the user should permanently benefit from applications adapted to the situation and her/his needs. To do this, she/he must be able to configure her/his software environment and be supported as much as possible in that task. To this end, an intelligent &ldquo;engine&rdquo; assembles software components that are present in the ambient environment at the time and makes unanticipated applications emerge. The problem is to put the user &ldquo;in the loop&rdquo;, i.e., provide adapted and intelligible descriptions of the emerging applications, and present them so that the user can accept, modify or reject them. Besides, user feedback must be collected to feed the engine&rsquo;s learning process. Our approach relies on Model-Driven Engineering (MDE). However, differently from the regular use of MDE tools and techniques by engineers to develop software and generate code, our focus is on end-users. Models of component assemblies are represented and made editable for them. Based on a metamodel that supports modeling and de- scription of component-based applications, a user interface provides multi-faceted representations of the emerging applications and captures user feedback. Our solution relies on several domain- specific languages and a transformation process, based on the established MDE tools (Gemoc studio, Eclipse Modeling Framework, EcoreTools, Sirius, Acceleo). It works in conjunction with the intelligent engine that builds the emerging applications and to which it provides learning data.},
	issn = {0948-695X},
	pages = {755-773},
	URL = {https://doi.org/10.3897/jucs.70515},
	eprint = {https://doi.org/10.3897/jucs.70515},
	journal = {JUCS - Journal of Universal Computer Science}
}
